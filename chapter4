                                                          第四章学习记录
  一：序言                                                        
    本章的学习主要比较Java和Scala在创建类方面的差异，首先从一个简单的Java类开始，接着将该Java类转换成Scala类，看看Scala是如何简化类的创建的。
    接下来学习Scala创业类方面的知识点。
  
  二：创建类
  Student.java
  
  public class Student {
	private String name;
	private int age;
	private String address;
	
	public Student(String name, int age, String address) {
		this.name = name;
		this.age = age;
		this.address = address;
	}
	
	public String getName() {
		return name;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public String getAddress() {
		return address;
	}
	
	public void setAddress(String address) {
		this.address = address;
	}
    }
    
    Student.scala
    
    class Student(var name: String, var age: Int, var address: String)
    
    从上面的Student.java 和 Student.scala 对比中，我们可以看出Scala大大降低了代码量，通常一个同样功能由Scala来实现的话，其代码量
    
    一般为Java实现代码量的一半以下。因此Scala还是值得我们这些Java屌丝学习的。
    
 
 三：Scala类的定义
     从上面的Student.scala的定义中，我们可以看出Scala定义一个类是很简单的事情，Scala将主构造函数【Primary Constructor】放在类的定义，
     让我们定义字段和对应的getXXX,setXXX方法变得很简单。类定义看上去很简单，但是背后隐含了很多信息，下面我们通过编译和反编译看看背后的
     秘密。
     
     	E:\program_scala_learning\chapter4>scalac Student.scala

	E:\program_scala_learning\chapter4>javap -private Student
	Compiled from "Student.scala"
	public class Student {
	  private java.lang.String name;
	  private int age;
	  private java.lang.String address;
	  public java.lang.String name();
	  public void name_$eq(java.lang.String);
	  public int age();
	  public void age_$eq(int);
	  public java.lang.String address();
	  public void address_$eq(java.lang.String);
	  public Student(java.lang.String, int, java.lang.String);
	}
     
     1： Scala将会把这个类变成public的，在Scala中，任何没有标记为private,protected的数据默认都是public的；
     
     2： 主构造函数中var定义的变量，会在类中定义成private的字段，并且有对应的public getXXX,setXXX方法，【例如Student.scala中name字段的
          定义】
          	  private java.lang.String name;
	          public java.lang.String name();
	          public void name_$eq(java.lang.String);
	          
     3： 主构造函数中val定义的变量，会在类中定义成private final的字段，并且有对应的public getXXX方法，【例如Teacher.scala中name字段的
          定义】
          	 class Teacher(val name: String, val age: Int, val address: String)
          	 
          	  E:\program_scala_learning\chapter4>javap -private Teacher
		  Compiled from "Teacher.scala"
		  public class Teacher {
		   private final java.lang.String name;
		   public java.lang.String name();
		   public Teacher(java.lang.String, int, java.lang.String);
		  }
		  
     4: 主构造函数中如果参数既没有被val修饰也没有被var修饰的话，Scala就会创建一个private类型的字段以及private的getXXX,setXXX,
        这样外界就无法访问了。
        
     5: 位于类中定义的任何表达式或者可执行语句都是主构造函数定义的一部分执行。例如下面的例子
     
     	class Sample{
		println("I am creating an instance of Sample class")
	}

	new Sample

	E:\program_scala_learning\chapter4>scala Sample.scala
	I am creating an instance of Sample class
        
        
     
     
     
     



